{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cast","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KA+B5C,OACI,0BAAMC,SAlBW,SAACC,GACtBA,EAAEC,iBAEHJ,EAAWK,OAAOC,OAAQ,IAEzBR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAcV,2BACAO,KAAK,OACLC,MAAQT,EACRU,SA/BsB,SAACP,GAE3BF,EAAcE,EAAEQ,OAAOF,Y,uBCXdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEkCC,UAAUH,GAF5C,gEAGDI,MAAOF,GAHN,cAGbG,EAHa,gBAICA,EAAKC,OAJN,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAC5B,MAAO,CAEPC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXf,kBAmBZM,GAnBY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OAFAc,QAAQC,IAAIN,EAAGC,EAAMV,GAGjB,yBAAKgB,UAAU,QACZ,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCJFS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEhBd,mBAAS,CACnCqB,KAAM,GACNe,SAAQ,IAJkC,mBAEnCC,EAFmC,KAE5BC,EAF4B,KA+C1C,OAtCAC,qBAAU,WAEN1B,EAAQC,GACP0B,MAAK,SAAAC,GAEFC,YAAY,WAERZ,QAAQC,IAAIU,GACZH,EAAS,CAELjB,KAAKoB,EACLL,SAAQ,MAId,UAOP,CAACtB,IAgBGuB,ED3CuBM,CAAa7B,GAA/Ba,EAH2B,EAGhCN,KAAae,EAHmB,EAGnBA,QAYhB,OACI,oCAEA,4BAAKtB,GAIJsB,GAAW,sCAEZ,yBAAKJ,UAAU,aAKdL,EAAOJ,KAAI,SAAAC,GAAG,OAEd,kBAAC,EAAD,eACAoB,IAAKpB,EAAIC,IACLD,UE9BAqB,EAAe,WAAO,IAAD,EAEI7C,mBAAS,CAAC,cAFd,mBAEzB8C,EAFyB,KAEb/C,EAFa,KAM9B,OACI,oCACI,4CAGA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIZ,4BAGA+C,EAAWvB,KAAI,SAACT,EAAUiC,GAAX,OACX,kBAAC,EAAD,CACAH,IAAM9B,EACNA,SAAWA,UCvBfkC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.5f45be03.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setcategories}) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('');\r\n    \r\n    \r\n    \r\n    const handleInputChange = (e) => {\r\n   \r\n    setinputValue(e.target.value);\r\n\r\n\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\nif(inputValue.trim().length >2){\r\n\r\n    setcategories(cast => [ inputValue, ...cast,]);\r\n    setinputValue('');\r\n}\r\n\r\n\r\n    \r\n    \r\n\r\n}\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n           \r\n        <input\r\n        type=\"text\"\r\n        value ={inputValue}\r\n        onChange={ handleInputChange}\r\n        \r\n        ></input>\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n// AddCategory.PropTypes ={\r\n//     setcategories: PropTypes.func.isRequired\r\n// }","export const getGifs = async (category) => {\r\n\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit =10&api_key=ofT2E6KDfZYJ8ix9oBPTbKR620vVvxQz`\r\n    const resp =await fetch (url);\r\n    const {data} =await resp.json();\r\n    \r\n    const gifs = data.map(img =>{\r\n    return {\r\n    \r\n    id:img.id,\r\n    title:img.title,\r\n    url: img.images?.downsized_medium.url \r\n    \r\n    \r\n    }\r\n    \r\n    \r\n    })\r\n    \r\n    return gifs;\r\n \r\n    \r\n    } ","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    \r\n    console.log(id,title,url);\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\nconst {data:images, loading}= useFetchGifs(category);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        \r\n        <h3>{category}</h3>\r\n\r\n        {/* //OPERACION TERNARIA SI && ES TRUE EVALUA EL PARRAFO\r\n        SI NO NO HACE NADA */}\r\n        {loading && <p>Loading</p>}\r\n       \r\n        <div className=\"card-grid\">\r\n           \r\n        \r\n            {\r\n\r\n         images.map(img  => (\r\n\r\n         <GifGridItem \r\n         key={img.id}\r\n         {...img}\r\n         />\r\n\r\n\r\n         ))\r\n\r\n\r\n            }\r\n\r\n           \r\n        </div>\r\n    </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\nconst [state, setstate] = useState({\r\ndata: [],\r\nloading:true\r\n\r\n\r\n});\r\n\r\nuseEffect(() =>{\r\n\r\n    getGifs(category)\r\n    .then(imgs => {\r\n\r\n        setTimeout( () =>{\r\n\r\n            console.log(imgs);\r\n            setstate({\r\n             \r\n                data:imgs,\r\n                loading:false\r\n                \r\n                });\r\n\r\n        },3000);\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n}, [category])\r\n\r\n\r\n// setTimeout(() => {\r\n\r\n// setstate({\r\n\r\n// data: [1,2,3,4,5],\r\n// loading: false\r\n\r\n\r\n// })\r\n\r\n\r\n// },3000);\r\n\r\nreturn state;\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport {AddCategory} from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n   \r\n  const [categories, setcategories] = useState(['One punch' ]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            {/* pasamos como parametro la set categories al componente AddCategory que es parte de usestate  */}\r\n            <AddCategory setcategories={setcategories} />\r\n            <hr/>\r\n\r\n\r\n\r\n<ol>\r\n{\r\n\r\ncategories.map((category, i) => ( \r\n    <GifGrid\r\n    key ={category} \r\n    category ={category}/>\r\n\r\n\r\n))\r\n\r\n}\r\n\r\n</ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp  />,\n \n  document.getElementById('root')\n);\n\n\n//\n\n\n\n\n"],"sourceRoot":""}